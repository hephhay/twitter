"""
Django settings for twitter project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os
from typing import Dict, Union, Optional, Any, Callable
from datetime import timedelta

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Function to set object based on debug status

def SELECT(
    dev: Any, prod: Any, op: Optional[Callable[[Any], Any]] = None, debug = DEBUG
):
    if op:
        dev, prod = map(op, [dev, prod])
    return dev if debug else dev


ALLOWED_HOSTS = SELECT(['*'], [])


# Application definition

INSTALLED_APPS = [
    # third-party priority apps
    'daphne',
    'django_celery_results',
    'corsheaders',
    'whitenoise.runserver_nostatic',

    #django defined apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # third-party apps
    'rest_framework',
    'djoser',
    'rest_framework_simplejwt',
    'django_filters',

    #twitter defined apps
    'users',
    'post',
    'real_time',
    'utils'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',                                               
]

ROOT_URLCONF = 'twitter.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'twitter.wsgi.application'

ASGI_APPLICATION = 'twitter.asgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DEBUG_DATABASE : Dict[str, Union[Dict[str, Optional[str]], Optional[str]]] = {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': os.getenv('DB_DATABASE_DEV'),
    'USER': os.getenv('DB_USER_DEV'),
    'PASSWORD': os.getenv('DB_PASSWORD_DEV'),
    'HOST': os.getenv('DB_HOST_DEV'),
    'PORT': os.getenv('DB_PORT_DEV'),
    'TEST': {
            'NAME': os.getenv('DB_DATABASE_TEST'),
        },
}

PROD_DATABASE : Dict[str, Optional[str]] = {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': os.getenv('DB_DATABASE'),
    'USER': os.getenv('DB_USER'),
    'PASSWORD': os.getenv('DB_PASSWORD'),
    'HOST': os.getenv('DB_HOST'),
    'PORT': os.getenv('DB_PORT'),
}

DATABASES = {
    'default': SELECT(DEBUG_DATABASE, PROD_DATABASE)
}

# Django caches
# https://docs.djangoproject.com/en/4.1/ref/settings/#std-setting-CACHES

CACHES_URL = [SELECT("CACHE_URL_DEV", "CACHE_URL", os.getenv)]

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": CACHES_URL,
    },
}

# User substitution
# https://docs.djangoproject.com/en/4.1/topics/auth/customizing/#auth-custom-user

AUTH_USER_MODEL = 'users.User'

USER_ID_FIELD = 'username'


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-gb'

TIME_ZONE = 'Africa/Lagos'

USE_I18N = True

USE_TZ = True

# Rest Framework
# https://www.django-rest-framework.org/#installation/
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication'
    ],
    'DEFAULT_FILTER_BACKENDS': [
    'django_filters.rest_framework.DjangoFilterBackend',
    'rest_framework.filters.SearchFilter'
    ],
    'DEFAULT_PAGINATION_CLASS': 'twitter.pagination.CustomPageNumberPagination'
}

DJOSER = {
    "USER_ID_FIELD": USER_ID_FIELD,
    "SERIALIZERS": {
        "user_create": "users.serializers.UserCreate",
        "user": "users.serializers.UserSerializer",
        "current_user": "users.serializers.UserSerializer",
    },
    "PERMISSIONS": {
        "user_list": ["rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly"],
        "user": ["twitter.permissions.CurrentUserOrAdminOrReadOnly"]
    },
    "HIDE_USERS": False
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': USER_ID_FIELD,
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ['rest_framework_simplejwt.tokens.AccessToken'],
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

AUTH_USER_MODEL = 'users.User'

USER_ID_FIELD = 'username'

# Django channels layer
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": CACHES_URL,
        },
    },
}

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = BASE_DIR / "staticfiles"

FIXTURE_DIRS = [
    BASE_DIR / 'fixtures'
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery broker settings
CELERY_BROKER_USER=SELECT('BROKER_USER_DEV', 'BROKER_USER', os.getenv)
CELERY_BROKER_PASSWORD=SELECT('BROKER_PASSWORD_DEV', 'BROKER_PASSWORD', os.getenv)
CELERY_BROKER_URL = SELECT('BROKER_URL_DEV', 'BROKER_URL', os.getenv)

CELERY_ACCEPT_CONTENT = ['json', 'pickle']

CELERY_RESULT_BACKEND = f"{CACHES_URL[0]}/0"

CORS_ALLOW_ALL_ORIGINS = DEBUG

# CORS_ALLOWED_ORIGINS = []